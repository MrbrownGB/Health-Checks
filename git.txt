#need to tell Git who we are. We can do this by using
the Git config command 
git config --global user.email "me@example.com"
git config --global user.name "My name"

there are two ways to start working with a git repository.
1-We can create one from scratch using the git init command 
2-or we can use the git clone command to make a copy of a repository that already exists somewhere else. 

We can also use the ls-l.git command to look inside of it and see the many different things it contains. This is called a Git directory.

To make Git track our file, we'll add it to the project using the git add command passing the file that we want as a parameter. With that, we've added our file to the staging area

We can use the git status command to get some information about the current working tree and pending changes.


We see that our new file is marked to be committed, this means that our change is currently in the staging area. To get it committed into the.git directory, we run the git commit command.

When we operate with Git, our files can be either tracked or untracked.
Tracked files are part of the snapshots, while untracked files aren't a part of snapshots yet.
This is the usual case for new files. 
Each track file can be in one of three main states, modified, staged or committed. 

When we call Git add, we're telling Git that we want to add the current changes in that file to the list of changes to be committed.
This means that our file is currently part of the staging area, and it will be committed once we run the next Git command, Git commit. 

git commit -m "whatever u wanna write"

checkour current configuration by using the git config -l command

git add command will immediately move a new file from untracked to stage status.
And as we'll see later, it will also change a file in the modified state to staged state.
There's a git command used to display these commit messages called git log.  
The first commit in the list also says that the head indicator is pointing to the master branch
we can skip the staging step and go directly to the commit. No dress rehearsals. We do this by using the git commit -a

git commit -a -m "write ur commit directily"
when you use the -a shortcut, you skip the staging area. Meaning, you can't add any other changes before creating the commit.
 -p flag. The p comes from patch, because using this flag gives us the patch that was created. git log -p
git show. This command takes a commit ID as a parameter, and will display the information about the commit and the associated patch

Another interesting flag for git log is the --stat flag. This will cause git log to show some stats about the changes in the commit, like which files were changed and how many lines were added or removed.

git diff see the last changes u made

-p flag with the git add command. When we use this flag, git will show us the change being added and ask us if we want to stage it or not
git add -p /If we call git diff again, it won't show any differences, since git diff shows only unstaged changes by default. 
 we can call git diff -- staged to see the changes that are staged but not committe . 
 
 git rm remove file repo
 git mv to rename file
 
if there are files that get automatically generated by our scripts, or our operating system generates artifacts that we don't want in our repo, we'll want to ignore them so that they don't add noise to the output of git status. 
To do this, we can use the gitignore file.  Inside this file, we'll specify rules to tell git which files to skip for the current repo.

 You can change a file back to its earlier committed state by using the git checkout command followed by the name of the file
if you need to check out individual changes instead of the whole file, you can do that using the -p

If we realize we've added something to the staging area that we didn't actually want to commit, we can unstage our changes by using the git reset 

if we use a command like git add *, where the star is a file glob pattern used in Bash that expands to all files. This command will end up adding any change done in the working tree to the staging area

git reset HEAD <file name > or git restore --staged <file> untrack the filee tracked from git add *

 git reset -p to get git to ask you which specific changes you want to reset.























